<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bencodex</name>
    </assembly>
    <members>
        <member name="T:Bencodex.Codec">
            <summary>The most basic and the lowest-level interface to encode and
            decode Bencodex values.  This provides two types of input and output:
            <c cref="T:System.Byte">Byte</c> arrays and I/O
            <c cref="T:System.IO.Stream">Stream</c>s.</summary>
        </member>
        <member name="M:Bencodex.Codec.Encode(Bencodex.Types.IValue,System.IO.Stream)">
            <summary>Encodes a <paramref name="value"/>, and writes it on
            the <paramref name="output"/> stream.</summary>
            <param name="value">A value to encode.</param>
            <param name="output">A stream that a value is printed on.</param>
            <exception cref="T:System.ArgumentException">Thrown when the given <paramref name="output"/>
            stream is not writable.</exception>
        </member>
        <member name="M:Bencodex.Codec.Encode(Bencodex.Types.IValue)">
            <summary>
            Encodes a <paramref name="value"/> into a single
            <c cref="T:System.Byte">Byte</c> array, rather than split into
            multiple chunks.</summary>
            <param name="value">A value to encode.</param>
            <returns>A single <c cref="T:System.Byte">Byte</c> array which
            contains the whole Bencodex representation of
            the <paramref name="value"/>.</returns>
        </member>
        <member name="M:Bencodex.Codec.Decode(System.IO.Stream)">
            <summary>Decodes an encoded value from an <paramref name="input"/>
            stream.</summary>
            <param name="input">An input stream to decode.</param>
            <returns>A decoded value.</returns>
            <exception cref="T:System.ArgumentException">Thrown when a given
            <paramref name="input"/> stream is not readable.</exception>
            <exception cref="T:Bencodex.DecodingException">Thrown when a binary
            representation of an <paramref name="input"/> stream is not a valid
            Bencodex encoding.</exception>
        </member>
        <member name="M:Bencodex.Codec.Decode(System.Byte[])">
            <summary>Decodes an encoded value from a
            <c cref="T:System.Byte">Byte</c> array.</summary>
            <param name="bytes">A <c cref="T:System.Byte">Byte</c> array of
            Bencodex encoding.</param>
            <returns>A decoded value.</returns>
            <exception cref="T:Bencodex.DecodingException">Thrown when a
            <paramref name="bytes"/> representation is not a valid Bencodex
            encoding.</exception>
        </member>
        <member name="T:Bencodex.CodecException">
            <summary>Serves as the base class for codec exceptions.</summary>
            <inheritdoc />
        </member>
        <member name="M:Bencodex.Decoder.Read(System.Byte[])">
            <summary>
            Fills given <paramref name="buffer"/> from the internal <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="buffer">The buffer to fill.</param>
            <exception cref="T:Bencodex.DecodingException">Thrown when the internal <see cref="T:System.IO.Stream"/>
            terminates before <paramref name="buffer"/> is completely filled.</exception>
            <remarks>This is used only for decoding a <see cref="T:Bencodex.Types.Text"/> or
            a <see cref="T:Bencodex.Types.Binary"/> after the separator token ':' has been consumed.
            </remarks>
        </member>
        <member name="M:Bencodex.Decoder.ReadDigits(System.Byte[]@)">
            <summary>
            Reads the value portion of an encoded <see cref="T:Bencodex.Types.Integer"/> and
            its end token 'e'.
            </summary>
            <param name="buffer">The buffer to fill.  Its size may be adjusted
            when necessary.</param>
            <returns>The number of bytes read until 'e' is encountered from the
            internal <see cref="T:System.IO.Stream"/>.</returns>
            <remarks>
            This is called only from <see cref="M:Bencodex.Decoder.ReadInteger"/> after
            a beginning token 'i' has been consumed.
            </remarks>
        </member>
        <member name="M:Bencodex.Decoder.ReadInteger">
            <summary>
            Reads the value portion of an encoded <see cref="T:Bencodex.Types.Integer"/> and
            its end token 'e'.
            </summary>
            <returns>A <see cref="T:System.Numerics.BigInteger"/> corresponding to the
            value portion of an encoded <see cref="T:Bencodex.Types.Integer"/>.</returns>
            <exception cref="T:Bencodex.DecodingException">Thrown for any reason
            where the byte array representing the value portion is
            invalid.</exception>
        </member>
        <member name="T:Bencodex.DecodingException">
            <summary>The exception that is thrown when an input is not
            a valid Bencodex encoding so that a decoder cannot parse it.</summary>
            <inheritdoc />
        </member>
        <member name="T:Bencodex.IBencodable">
             <summary>
             Defines a generic <see langword="interface"/> for an object that can be
             encoded into an <see cref="T:Bencodex.Types.IValue"/>.  Any <see langword="class"/> implementing
             this <see langword="interface"/> should also implement either a constructor
             or a <see langword="static"/> factory method with an <see cref="T:Bencodex.Types.IValue"/> as a parameter
             for decoding.
             </summary>
             <remarks>
             Note that encoding and decoding mentioned here are different from
             <see cref="M:Bencodex.Codec.Encode(Bencodex.Types.IValue)"/> and <see cref="M:Bencodex.Codec.Decode(System.Byte[])"/>.
             </remarks>
             <example>
             The following example shows an implementation of an integer point <see langword="class"/>
             with two distinct methods of decoding, via a constructor and a <see langword="static"/>
             factory method, for illustration:
             <code><![CDATA[
             public class Point : IBencodable
             {
                 public Point(int x, int y)
                 {
                     X = x;
                     Y = y;
                 }
            
                 public Point(IValue bencoded)
                     : this((List)bencoded)
                 {
                 }
            
                 private Point(List bencoded)
                     : this((Integer)bencoded[0], (Integer)bencoded[1])
                 {
                 }
            
                 public int X { get; }
            
                 public int Y { get; }
            
                 public IValue Bencoded => List.Empty.Add(X).Add(Y);
            
                 public static Point Decode(IValue bencoded)
                 {
                     return bencoded is List list
                         ? new Point((Integer)list[0], (Integer)list[1])
                         : throw new ArgumentException(
                             $"Invalid type: {bencoded.GetType()}",
                             nameof(bencoded));
                 }
             }
             ]]></code>
             </example>
        </member>
        <member name="P:Bencodex.IBencodable.Bencoded">
            <summary>
            An <see cref="T:Bencodex.Types.IValue"/> representation of this object that can be
            decoded back to instantiate an equal object.  The decoded object must
            be equal to the original in the sense that <see cref="M:System.IEquatable`1.Equals(`0)"/>
            should be <see langword="true"/>.
            </summary>
            <remarks>
            <para>
            Note that the only requirement is that the produced <see cref="T:Bencodex.Types.IValue"/>
            can be decoded back to an equal object.  This representation may not be canonical
            in the sense that additional junk data may be present in an <see cref="T:Bencodex.Types.IValue"/>
            that one may wish to decode and this may be discarded while decoding.
            </para>
            <para>
            A specific implemnetation may decide to only allow the canonical representation
            to be decoded.
            </para>
            </remarks>
        </member>
        <member name="T:Bencodex.Misc.ImmutableByteArrayExtensions">
            <summary>
            Extension methods on <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> of <see cref="T:System.Byte"/>s.
            </summary>
        </member>
        <member name="M:Bencodex.Misc.ImmutableByteArrayExtensions.Hex(System.Collections.Immutable.ImmutableArray{System.Byte}@)">
            <summary>
            Converts the given <paramref name="bytes"/> into a string of hexadecimal digits.
            </summary>
            <param name="bytes">The byte array to convert.</param>
            <returns>The hexadecimal digits.  Alphabets are all lowercase.</returns>
        </member>
        <member name="M:Bencodex.Misc.ImmutableByteArrayExtensions.ParseHex(System.String)">
            <summary>
            Parses the given <paramref name="hex"/> string into the bytes.
            </summary>
            <param name="hex">The hexadecimal digits to convert.</param>
            <returns>The converted byte array.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the length of
            <paramref name="hex"/> string is an odd number.</exception>
            <exception cref="T:System.FormatException">Thrown when the <paramref name="hex"/>
            string contains non-hexadecimal digits.</exception>
        </member>
        <member name="T:Bencodex.Misc.KeyComparer">
            <summary>
            Compares two <see cref="T:Bencodex.Types.IKey"/> values.  The order is according to the Bencodex
            specification on dictionary keys.
            </summary>
        </member>
        <member name="F:Bencodex.Misc.KeyComparer.Instance">
            <summary>
            The singleton instance of <see cref="T:Bencodex.Misc.KeyComparer"/>.
            </summary>
        </member>
        <member name="M:Bencodex.Misc.KeyComparer.Compare(Bencodex.Types.IKey,Bencodex.Types.IKey)">
            <inheritdoc cref="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)"/>
        </member>
        <member name="P:Bencodex.Types.Binary.Kind">
            <inheritdoc cref="P:Bencodex.Types.IValue.Kind"/>
        </member>
        <member name="P:Bencodex.Types.Binary.EncodingLength">
            <inheritdoc cref="P:Bencodex.Types.IValue.EncodingLength"/>
        </member>
        <member name="M:Bencodex.Types.Binary.FromHex(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:Bencodex.Types.Binary"/> instance from a binary turned into
            <paramref name="hex"/>.
            </summary>
            <param name="hex">A hexadecimal representation of a binary.</param>
            <param name="offset">The offset of the first character to convert.
            </param>
            <param name="count">The number of characters to convert.  If omitted
            or -1, the rest of the string is used.</param>
            <returns>A new <see cref="T:Bencodex.Types.Binary"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when any of
            <paramref name="offset"/> or <paramref name="count"/> refers to a
            position outside of <paramref name="hex"/>.</exception>
            <exception cref="T:System.FormatException">Thrown when the given range of
            <paramref name="hex"/> is not a valid hexadecimal representation of
            a binary.</exception>
        </member>
        <member name="M:Bencodex.Types.Binary.FromBase64(System.String)">
            <summary>
            Creates a new <see cref="T:Bencodex.Types.Binary"/> instance from a binary turned into
            <paramref name="base64"/>.
            </summary>
            <param name="base64">A base64 representation of a binary.</param>
            <returns>A new <see cref="T:Bencodex.Types.Binary"/> instance.</returns>
            <exception cref="T:System.FormatException">Thrown when the given
            <paramref name="base64"/> is not a valid base64 representation.</exception>
        </member>
        <member name="M:Bencodex.Types.Binary.ToHex(System.Text.StringBuilder)">
            <summary>
            Writes the hexadecimal representation of the binary to the given
            <paramref name="builder"/>.
            </summary>
            <param name="builder">A <see cref="T:System.Text.StringBuilder"/> to write the
            hexadecimal representation of the binary.</param>
        </member>
        <member name="M:Bencodex.Types.Binary.ToHex">
            <summary>
            Returns the hexadecimal representation of the binary.
            </summary>
            <returns>The hexadecimal representation of the binary.</returns>
        </member>
        <member name="M:Bencodex.Types.Binary.ToBase64">
            <summary>
            Returns the base64 representation of the binary.
            </summary>
            <returns>The base64 representation of the binary.</returns>
        </member>
        <member name="M:Bencodex.Types.Binary.Inspect">
            <inheritdoc cref="M:Bencodex.Types.IValue.Inspect"/>
        </member>
        <member name="M:Bencodex.Types.Binary.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Bencodex.Types.Boolean">
            <summary>Represents a Bencodex Boolean true (i.e., <c>t</c>)
            or false (i.e., <c>f</c>).</summary>
        </member>
        <member name="P:Bencodex.Types.Boolean.Kind">
            <inheritdoc cref="P:Bencodex.Types.IValue.Kind"/>
        </member>
        <member name="P:Bencodex.Types.Boolean.EncodingLength">
            <inheritdoc cref="P:Bencodex.Types.IValue.EncodingLength"/>
        </member>
        <member name="M:Bencodex.Types.Boolean.Inspect">
            <inheritdoc cref="M:Bencodex.Types.IValue.Inspect"/>
        </member>
        <member name="M:Bencodex.Types.Boolean.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Bencodex.Types.Dictionary">
            <summary>
            Represents Bencodex dictionaries.
            </summary>
        </member>
        <member name="F:Bencodex.Types.Dictionary.Empty">
            <summary>
            The empty dictionary.
            </summary>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.IKey,Bencodex.Types.IValue}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Text,Bencodex.Types.IValue}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Text,Bencodex.Types.Boolean}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Text,Bencodex.Types.Integer}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Text,Bencodex.Types.Binary}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Text,Bencodex.Types.Text}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Text,Bencodex.Types.List}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Text,Bencodex.Types.Dictionary}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Text,System.Boolean}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Text,System.Int16}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Text,System.UInt16}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Text,System.Int32}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Text,System.UInt32}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Text,System.Int64}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Text,System.UInt64}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Text,System.Byte[]}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Text,System.Collections.Immutable.ImmutableArray{System.Byte}}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Text,System.String}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Binary,Bencodex.Types.IValue}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Binary,Bencodex.Types.Boolean}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Binary,Bencodex.Types.Integer}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Binary,Bencodex.Types.Binary}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Binary,Bencodex.Types.Text}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Binary,Bencodex.Types.List}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Binary,Bencodex.Types.Dictionary}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Binary,System.Boolean}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Binary,System.Int16}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Binary,System.UInt16}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Binary,System.Int32}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Binary,System.UInt32}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Binary,System.Int64}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Binary,System.UInt64}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Binary,System.Byte[]}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Binary,System.Collections.Immutable.ImmutableArray{System.Byte}}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.Binary,System.String}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Bencodex.Types.IValue}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Bencodex.Types.Boolean}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Bencodex.Types.Integer}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Bencodex.Types.Binary}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Bencodex.Types.Text}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Bencodex.Types.List}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Bencodex.Types.Dictionary}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Boolean}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Int16}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.UInt16}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Int32}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.UInt32}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Int64}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.UInt64}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Byte[]}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Immutable.ImmutableArray{System.Byte}}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Byte[],Bencodex.Types.IValue}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Byte[],Bencodex.Types.Boolean}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Byte[],Bencodex.Types.Integer}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Byte[],Bencodex.Types.Binary}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Byte[],Bencodex.Types.Text}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Byte[],Bencodex.Types.List}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Byte[],Bencodex.Types.Dictionary}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Byte[],System.Boolean}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Byte[],System.Int16}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Byte[],System.UInt16}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Byte[],System.Int32}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Byte[],System.UInt32}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Byte[],System.Int64}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Byte[],System.UInt64}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Byte[],System.Byte[]}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Byte[],System.Collections.Immutable.ImmutableArray{System.Byte}}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Byte[],System.String}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Collections.Immutable.ImmutableArray{System.Byte},Bencodex.Types.IValue}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Collections.Immutable.ImmutableArray{System.Byte},Bencodex.Types.Boolean}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Collections.Immutable.ImmutableArray{System.Byte},Bencodex.Types.Integer}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Collections.Immutable.ImmutableArray{System.Byte},Bencodex.Types.Binary}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Collections.Immutable.ImmutableArray{System.Byte},Bencodex.Types.Text}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Collections.Immutable.ImmutableArray{System.Byte},Bencodex.Types.List}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Collections.Immutable.ImmutableArray{System.Byte},Bencodex.Types.Dictionary}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Collections.Immutable.ImmutableArray{System.Byte},System.Boolean}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Collections.Immutable.ImmutableArray{System.Byte},System.Int16}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Collections.Immutable.ImmutableArray{System.Byte},System.UInt16}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Collections.Immutable.ImmutableArray{System.Byte},System.Int32}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Collections.Immutable.ImmutableArray{System.Byte},System.UInt32}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Collections.Immutable.ImmutableArray{System.Byte},System.Int64}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Collections.Immutable.ImmutableArray{System.Byte},System.UInt64}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Collections.Immutable.ImmutableArray{System.Byte},System.Byte[]}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Collections.Immutable.ImmutableArray{System.Byte},System.Collections.Immutable.ImmutableArray{System.Byte}}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="M:Bencodex.Types.Dictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Collections.Immutable.ImmutableArray{System.Byte},System.String}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.Dictionary"/> instance with key-value <paramref name="pairs"/>.
            </summary>
            <param name="pairs">Key-value pairs to include.  If there are duplicated keys,
            later pairs overwrite earlier ones.</param>
        </member>
        <member name="P:Bencodex.Types.Dictionary.Count">
            <inheritdoc cref="P:System.Collections.Generic.IReadOnlyCollection`1.Count"/>
        </member>
        <member name="P:Bencodex.Types.Dictionary.Keys">
            <inheritdoc cref="P:System.Collections.Generic.IReadOnlyDictionary`2.Keys"/>
        </member>
        <member name="P:Bencodex.Types.Dictionary.Values">
            <inheritdoc cref="P:System.Collections.Generic.IReadOnlyDictionary`2.Values"/>
        </member>
        <member name="P:Bencodex.Types.Dictionary.Kind">
            <inheritdoc cref="P:Bencodex.Types.IValue.Kind"/>
        </member>
        <member name="P:Bencodex.Types.Dictionary.EncodingLength">
            <inheritdoc cref="P:Bencodex.Types.IValue.EncodingLength"/>
        </member>
        <member name="P:Bencodex.Types.Dictionary.Item(Bencodex.Types.IKey)">
            <inheritdoc cref="P:System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)"/>
        </member>
        <member name="P:Bencodex.Types.Dictionary.Item(Bencodex.Types.Text)">
            <summary>
            Gets the element that has the specified text key in the read-only dictionary.
            </summary>
            <param name="key">The text key to locate.</param>
            <returns>The element that has the specified key in the read-only dictionary.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the <paramref name="key" />
            is not found.</exception>
        </member>
        <member name="P:Bencodex.Types.Dictionary.Item(System.String)">
            <summary>
            Gets the element that has the specified string key in the read-only dictionary.
            </summary>
            <param name="key">The string key to locate.  This key is automatically turned into
            a <see cref="T:Bencodex.Types.Text"/> instance.</param>
            <returns>The element that has the specified key in the read-only dictionary.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the <paramref name="key" />
            is not found.</exception>
        </member>
        <member name="P:Bencodex.Types.Dictionary.Item(Bencodex.Types.Binary)">
            <summary>
            Gets the element that has the specified binary key in the read-only dictionary.
            </summary>
            <param name="key">The binary key to locate.</param>
            <returns>The element that has the specified key in the read-only dictionary.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the <paramref name="key" />
            is not found.</exception>
        </member>
        <member name="P:Bencodex.Types.Dictionary.Item(System.Collections.Immutable.ImmutableArray{System.Byte})">
            <summary>
            Gets the element that has the specified bytes key in the read-only dictionary.
            </summary>
            <param name="key">The bytes key to locate.  This key is automatically turned into
            a <see cref="T:Bencodex.Types.Binary"/> instance.</param>
            <returns>The element that has the specified key in the read-only dictionary.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the <paramref name="key" />
            is not found.</exception>
        </member>
        <member name="P:Bencodex.Types.Dictionary.Item(System.Byte[])">
            <summary>
            Gets the element that has the specified bytes key in the read-only dictionary.
            </summary>
            <param name="key">The bytes key to locate.  This key is automatically turned into
            a <see cref="T:Bencodex.Types.Binary"/> instance.</param>
            <returns>The element that has the specified key in the read-only dictionary.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the <paramref name="key" />
            is not found.</exception>
        </member>
        <member name="M:Bencodex.Types.Dictionary.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Bencodex.Types.Dictionary.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:Bencodex.Types.Dictionary.ContainsKey(Bencodex.Types.IKey)">
            <inheritdoc cref="M:System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)"/>
        </member>
        <member name="M:Bencodex.Types.Dictionary.ContainsKey(Bencodex.Types.Text)">
            <summary>Determines whether the dictionary contains the specified text key.</summary>
            <param name="key">The text key to locate.</param>
            <returns><see langword="true" /> if the dictionary contains the specified key;
            otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Bencodex.Types.Dictionary.ContainsKey(System.String)">
            <summary>Determines whether the dictionary contains the specified string key.</summary>
            <param name="key">The string key to locate.</param>
            <returns><see langword="true" /> if the dictionary contains the specified key;
            otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Bencodex.Types.Dictionary.ContainsKey(Bencodex.Types.Binary)">
            <summary>Determines whether the dictionary contains the specified binary key.</summary>
            <param name="key">The binary key to locate.</param>
            <returns><see langword="true" /> if the dictionary contains the specified key;
            otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Bencodex.Types.Dictionary.ContainsKey(System.Collections.Immutable.ImmutableArray{System.Byte})">
            <summary>Determines whether the dictionary contains the specified bytes key.</summary>
            <param name="key">The bytes key to locate.</param>
            <returns><see langword="true" /> if the dictionary contains the specified key;
            otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Bencodex.Types.Dictionary.ContainsKey(System.Byte[])">
            <summary>Determines whether the dictionary contains the specified bytes key.</summary>
            <param name="key">The bytes key to locate.</param>
            <returns><see langword="true" /> if the dictionary contains the specified key;
            otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Bencodex.Types.Dictionary.TryGetValue(Bencodex.Types.IKey,Bencodex.Types.IValue@)">
            <inheritdoc cref="M:System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:Bencodex.Types.Dictionary.Add(Bencodex.Types.IKey,Bencodex.Types.IValue)">
            <inheritdoc cref="M:System.Collections.Immutable.IImmutableDictionary`2.Add(`0,`1)"/>
        </member>
        <member name="M:Bencodex.Types.Dictionary.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.IKey,Bencodex.Types.IValue}})">
            <inheritdoc cref="M:System.Collections.Immutable.IImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})"/>
        </member>
        <member name="M:Bencodex.Types.Dictionary.Clear">
            <inheritdoc cref="M:System.Collections.Immutable.IImmutableDictionary`2.Clear"/>
        </member>
        <member name="M:Bencodex.Types.Dictionary.Contains(System.Collections.Generic.KeyValuePair{Bencodex.Types.IKey,Bencodex.Types.IValue})">
            <inheritdoc
            cref="M:System.Collections.Immutable.IImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})"/>
        </member>
        <member name="M:Bencodex.Types.Dictionary.Remove(Bencodex.Types.IKey)">
            <inheritdoc cref="M:System.Collections.Immutable.IImmutableDictionary`2.Remove(`0)"/>
        </member>
        <member name="M:Bencodex.Types.Dictionary.RemoveRange(System.Collections.Generic.IEnumerable{Bencodex.Types.IKey})">
            <inheritdoc cref="M:System.Collections.Immutable.IImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:Bencodex.Types.Dictionary.SetItem(Bencodex.Types.IKey,Bencodex.Types.IValue)">
            <inheritdoc cref="M:System.Collections.Immutable.IImmutableDictionary`2.SetItem(`0,`1)"/>
        </member>
        <member name="M:Bencodex.Types.Dictionary.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Bencodex.Types.IKey,Bencodex.Types.IValue}})">
            <inheritdoc cref="M:System.Collections.Immutable.IImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})"/>
        </member>
        <member name="M:Bencodex.Types.Dictionary.TryGetKey(Bencodex.Types.IKey,Bencodex.Types.IKey@)">
            <inheritdoc cref="M:System.Collections.Immutable.IImmutableDictionary`2.TryGetKey(`0,`0@)"/>
        </member>
        <member name="M:Bencodex.Types.Dictionary.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Bencodex.Types.Dictionary.Inspect">
            <inheritdoc cref="M:Bencodex.Types.IValue.Inspect"/>
        </member>
        <member name="M:Bencodex.Types.Dictionary.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Bencodex.Types.IKey">
            <summary>
            Represents Bencodex values which can be keys of a Bencodex <see cref="T:Bencodex.Types.Dictionary"/>.
            <para>It does not have extra ability over <see cref="T:Bencodex.Types.IValue"/>, but just purposes to
            group types can be keys of a Bencodex <see cref="T:Bencodex.Types.Dictionary"/>.</para>
            </summary>
            <seealso cref="T:Bencodex.Types.Binary"/>
            <seealso cref="T:Bencodex.Types.Text"/>
        </member>
        <member name="P:Bencodex.Types.Integer.Kind">
            <inheritdoc cref="P:Bencodex.Types.IValue.Kind"/>
        </member>
        <member name="P:Bencodex.Types.Integer.EncodingLength">
            <inheritdoc cref="P:Bencodex.Types.IValue.EncodingLength"/>
        </member>
        <member name="M:Bencodex.Types.Integer.Inspect">
            <inheritdoc cref="M:Bencodex.Types.IValue.Inspect"/>
        </member>
        <member name="M:Bencodex.Types.Integer.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Bencodex.Types.IValue">
            <summary>Represents a possible value in Bencodex representation.
            </summary>
            <seealso cref="T:Bencodex.Types.Null"/>
            <seealso cref="T:Bencodex.Types.Boolean"/>
            <seealso cref="T:Bencodex.Types.Integer"/>
            <seealso cref="T:Bencodex.Types.Binary"/>
            <seealso cref="T:Bencodex.Types.Text"/>
            <seealso cref="T:Bencodex.Types.List"/>
            <seealso cref="T:Bencodex.Types.Dictionary"/>
        </member>
        <member name="P:Bencodex.Types.IValue.Kind">
            <summary>
            The Bencodex type identifier.
            </summary>
        </member>
        <member name="P:Bencodex.Types.IValue.EncodingLength">
            <summary>The number of bytes used for serializing the value.</summary>
        </member>
        <member name="M:Bencodex.Types.IValue.Inspect">
            <summary>
            Gets a human-readable representation for debugging.
            </summary>
            <returns>A human-readable representation for debugging, which looks similar to Python's
            literal syntax.</returns>
        </member>
        <member name="T:Bencodex.Types.List">
            <summary>
            Represents Bencodex lists.
            </summary>
        </member>
        <member name="F:Bencodex.Types.List.Empty">
            <summary>
            The empty list.
            </summary>
        </member>
        <member name="M:Bencodex.Types.List.#ctor(Bencodex.Types.IValue[])">
            <summary>
            Creates a <see cref="T:Bencodex.Types.List"/> instance with <paramref name="elements"/>.
            </summary>
            <param name="elements">The element values to include.</param>
        </member>
        <member name="M:Bencodex.Types.List.#ctor(System.Collections.Generic.IEnumerable{Bencodex.Types.IValue})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.List"/> instance with <paramref name="elements"/>.
            </summary>
            <param name="elements">The element values to include.</param>
        </member>
        <member name="M:Bencodex.Types.List.#ctor(System.Collections.Generic.IEnumerable{Bencodex.Types.Boolean})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.List"/> instance with <paramref name="elements"/>.
            </summary>
            <param name="elements">The element values to include.</param>
        </member>
        <member name="M:Bencodex.Types.List.#ctor(System.Collections.Generic.IEnumerable{Bencodex.Types.Integer})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.List"/> instance with <paramref name="elements"/>.
            </summary>
            <param name="elements">The element values to include.</param>
        </member>
        <member name="M:Bencodex.Types.List.#ctor(System.Collections.Generic.IEnumerable{Bencodex.Types.Binary})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.List"/> instance with <paramref name="elements"/>.
            </summary>
            <param name="elements">The element values to include.</param>
        </member>
        <member name="M:Bencodex.Types.List.#ctor(System.Collections.Generic.IEnumerable{Bencodex.Types.Text})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.List"/> instance with <paramref name="elements"/>.
            </summary>
            <param name="elements">The element values to include.</param>
        </member>
        <member name="M:Bencodex.Types.List.#ctor(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.List"/> instance with <paramref name="elements"/>.
            </summary>
            <param name="elements">The element values to include.</param>
        </member>
        <member name="M:Bencodex.Types.List.#ctor(System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.List"/> instance with <paramref name="elements"/>.
            </summary>
            <param name="elements">The element values to include.</param>
        </member>
        <member name="M:Bencodex.Types.List.#ctor(System.Collections.Generic.IEnumerable{System.UInt16})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.List"/> instance with <paramref name="elements"/>.
            </summary>
            <param name="elements">The element values to include.</param>
        </member>
        <member name="M:Bencodex.Types.List.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.List"/> instance with <paramref name="elements"/>.
            </summary>
            <param name="elements">The element values to include.</param>
        </member>
        <member name="M:Bencodex.Types.List.#ctor(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.List"/> instance with <paramref name="elements"/>.
            </summary>
            <param name="elements">The element values to include.</param>
        </member>
        <member name="M:Bencodex.Types.List.#ctor(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.List"/> instance with <paramref name="elements"/>.
            </summary>
            <param name="elements">The element values to include.</param>
        </member>
        <member name="M:Bencodex.Types.List.#ctor(System.Collections.Generic.IEnumerable{System.UInt64})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.List"/> instance with <paramref name="elements"/>.
            </summary>
            <param name="elements">The element values to include.</param>
        </member>
        <member name="M:Bencodex.Types.List.#ctor(System.Collections.Generic.IEnumerable{System.Numerics.BigInteger})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.List"/> instance with <paramref name="elements"/>.
            </summary>
            <param name="elements">The element values to include.</param>
        </member>
        <member name="M:Bencodex.Types.List.#ctor(System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.List"/> instance with <paramref name="elements"/>.
            </summary>
            <param name="elements">The element values to include.</param>
        </member>
        <member name="M:Bencodex.Types.List.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Immutable.ImmutableArray{System.Byte}})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.List"/> instance with <paramref name="elements"/>.
            </summary>
            <param name="elements">The element values to include.</param>
        </member>
        <member name="M:Bencodex.Types.List.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a <see cref="T:Bencodex.Types.List"/> instance with <paramref name="elements"/>.
            </summary>
            <param name="elements">The element values to include.</param>
        </member>
        <member name="P:Bencodex.Types.List.Kind">
            <inheritdoc cref="P:Bencodex.Types.IValue.Kind"/>
        </member>
        <member name="P:Bencodex.Types.List.EncodingLength">
            <inheritdoc cref="P:Bencodex.Types.IValue.EncodingLength"/>
        </member>
        <member name="P:Bencodex.Types.List.Count">
            <inheritdoc cref="P:System.Collections.Generic.IReadOnlyCollection`1.Count"/>
        </member>
        <member name="P:Bencodex.Types.List.Item(System.Int32)">
            <inheritdoc cref="P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)"/>
        </member>
        <member name="M:Bencodex.Types.List.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Bencodex.Types.List.Add(Bencodex.Types.IValue)">
            <summary>Makes a copy of the list, and adds the specified <paramref name="value"/>
            to the end of the copied list.</summary>
            <param name="value">The value to add to the list.</param>
            <returns>A new list with the value added.</returns>
        </member>
        <member name="M:Bencodex.Types.List.Add(Bencodex.Types.Boolean)">
            <summary>Makes a copy of the list, and adds the specified <paramref name="value"/>
            to the end of the copied list.</summary>
            <param name="value">The value to add to the list.</param>
            <returns>A new list with the value added.</returns>
        </member>
        <member name="M:Bencodex.Types.List.Add(Bencodex.Types.Integer)">
            <summary>Makes a copy of the list, and adds the specified <paramref name="value"/>
            to the end of the copied list.</summary>
            <param name="value">The value to add to the list.</param>
            <returns>A new list with the value added.</returns>
        </member>
        <member name="M:Bencodex.Types.List.Add(Bencodex.Types.Binary)">
            <summary>Makes a copy of the list, and adds the specified <paramref name="value"/>
            to the end of the copied list.</summary>
            <param name="value">The value to add to the list.</param>
            <returns>A new list with the value added.</returns>
        </member>
        <member name="M:Bencodex.Types.List.Add(Bencodex.Types.Text)">
            <summary>Makes a copy of the list, and adds the specified <paramref name="value"/>
            to the end of the copied list.</summary>
            <param name="value">The value to add to the list.</param>
            <returns>A new list with the value added.</returns>
        </member>
        <member name="M:Bencodex.Types.List.Add(System.Boolean)">
            <summary>Makes a copy of the list, and adds the specified <paramref name="value"/>
            to the end of the copied list.</summary>
            <param name="value">The value to add to the list.  It is automatically turned into
            a Bencodex <see cref="T:Bencodex.Types.Boolean"/> instance.</param>
            <returns>A new list with the value added.</returns>
        </member>
        <member name="M:Bencodex.Types.List.Add(System.Int16)">
            <summary>Makes a copy of the list, and adds the specified <paramref name="value"/>
            to the end of the copied list.</summary>
            <param name="value">The value to add to the list.  It is automatically turned into
            a Bencodex <see cref="T:Bencodex.Types.Integer"/> instance.</param>
            <returns>A new list with the value added.</returns>
        </member>
        <member name="M:Bencodex.Types.List.Add(System.UInt16)">
            <summary>Makes a copy of the list, and adds the specified <paramref name="value"/>
            to the end of the copied list.</summary>
            <param name="value">The value to add to the list.  It is automatically turned into
            a Bencodex <see cref="T:Bencodex.Types.Integer"/> instance.</param>
            <returns>A new list with the value added.</returns>
        </member>
        <member name="M:Bencodex.Types.List.Add(System.Int32)">
            <summary>Makes a copy of the list, and adds the specified <paramref name="value"/>
            to the end of the copied list.</summary>
            <param name="value">The value to add to the list.  It is automatically turned into
            a Bencodex <see cref="T:Bencodex.Types.Integer"/> instance.</param>
            <returns>A new list with the value added.</returns>
        </member>
        <member name="M:Bencodex.Types.List.Add(System.UInt32)">
            <summary>Makes a copy of the list, and adds the specified <paramref name="value"/>
            to the end of the copied list.</summary>
            <param name="value">The value to add to the list.  It is automatically turned into
            a Bencodex <see cref="T:Bencodex.Types.Integer"/> instance.</param>
            <returns>A new list with the value added.</returns>
        </member>
        <member name="M:Bencodex.Types.List.Add(System.Int64)">
            <summary>Makes a copy of the list, and adds the specified <paramref name="value"/>
            to the end of the copied list.</summary>
            <param name="value">The value to add to the list.  It is automatically turned into
            a Bencodex <see cref="T:Bencodex.Types.Integer"/> instance.</param>
            <returns>A new list with the value added.</returns>
        </member>
        <member name="M:Bencodex.Types.List.Add(System.UInt64)">
            <summary>Makes a copy of the list, and adds the specified <paramref name="value"/>
            to the end of the copied list.</summary>
            <param name="value">The value to add to the list.  It is automatically turned into
            a Bencodex <see cref="T:Bencodex.Types.Integer"/> instance.</param>
            <returns>A new list with the value added.</returns>
        </member>
        <member name="M:Bencodex.Types.List.Add(System.Numerics.BigInteger)">
            <summary>Makes a copy of the list, and adds the specified <paramref name="value"/>
            to the end of the copied list.</summary>
            <param name="value">The value to add to the list.  It is automatically turned into
            a Bencodex <see cref="T:Bencodex.Types.Integer"/> instance.</param>
            <returns>A new list with the value added.</returns>
        </member>
        <member name="M:Bencodex.Types.List.Add(System.Byte[])">
            <summary>Makes a copy of the list, and adds the specified <paramref name="value"/>
            to the end of the copied list.</summary>
            <param name="value">The value to add to the list.  It is automatically turned into
            a Bencodex <see cref="T:Bencodex.Types.Binary"/> instance.</param>
            <returns>A new list with the value added.</returns>
        </member>
        <member name="M:Bencodex.Types.List.Add(System.Collections.Immutable.ImmutableArray{System.Byte})">
            <summary>Makes a copy of the list, and adds the specified <paramref name="value"/>
            to the end of the copied list.</summary>
            <param name="value">The value to add to the list.  It is automatically turned into
            a Bencodex <see cref="T:Bencodex.Types.Binary"/> instance.</param>
            <returns>A new list with the value added.</returns>
        </member>
        <member name="M:Bencodex.Types.List.Add(System.String)">
            <summary>Makes a copy of the list, and adds the specified <paramref name="value"/>
            to the end of the copied list.</summary>
            <param name="value">The value to add to the list.  It is automatically turned into
            a Bencodex <see cref="T:Bencodex.Types.Text"/> instance.</param>
            <returns>A new list with the value added.</returns>
        </member>
        <member name="M:Bencodex.Types.List.Inspect">
            <inheritdoc cref="M:Bencodex.Types.IValue.Inspect"/>
        </member>
        <member name="M:Bencodex.Types.List.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Bencodex.Types.Null">
            <summary>Represents a Bencodex null value (i.e., <c>n</c>).</summary>
        </member>
        <member name="F:Bencodex.Types.Null.Value">
            <summary>
            Represents a <see cref="T:Bencodex.Types.Null"/> instance.  Recommends to prefer this over using
            the default constructor or a <c>default</c> keyword.  This field is read-only.
            </summary>
        </member>
        <member name="P:Bencodex.Types.Null.Kind">
            <inheritdoc cref="P:Bencodex.Types.IValue.Kind"/>
        </member>
        <member name="P:Bencodex.Types.Null.EncodingLength">
            <inheritdoc cref="P:Bencodex.Types.IValue.EncodingLength"/>
        </member>
        <member name="M:Bencodex.Types.Null.Inspect">
            <inheritdoc cref="M:Bencodex.Types.IValue.Inspect"/>
        </member>
        <member name="M:Bencodex.Types.Null.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="P:Bencodex.Types.Text.Kind">
            <inheritdoc cref="P:Bencodex.Types.IValue.Kind"/>
        </member>
        <member name="P:Bencodex.Types.Text.EncodingLength">
            <inheritdoc cref="P:Bencodex.Types.IValue.EncodingLength"/>
        </member>
        <member name="M:Bencodex.Types.Text.Inspect">
            <inheritdoc cref="M:Bencodex.Types.IValue.Inspect"/>
        </member>
        <member name="M:Bencodex.Types.Text.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Bencodex.Types.ValueKind">
            <summary>
            The value to identify types of Bencodex values.
            </summary>
        </member>
        <member name="F:Bencodex.Types.ValueKind.Null">
            <summary>
            Null (<c>n</c>).
            </summary>
        </member>
        <member name="F:Bencodex.Types.ValueKind.Boolean">
            <summary>
            True (<c>t</c>) or false (<c>f</c>).
            </summary>
        </member>
        <member name="F:Bencodex.Types.ValueKind.Integer">
            <summary>
            Integers (<c>i...e</c>).
            </summary>
        </member>
        <member name="F:Bencodex.Types.ValueKind.Binary">
            <summary>
            Byte strings (<c>N:...</c>).
            </summary>
        </member>
        <member name="F:Bencodex.Types.ValueKind.Text">
            <summary>
            Unicode strings (<c>uN:...</c>).
            </summary>
        </member>
        <member name="F:Bencodex.Types.ValueKind.List">
            <summary>
            Lists (<c>l...e</c>).
            </summary>
        </member>
        <member name="F:Bencodex.Types.ValueKind.Dictionary">
            <summary>
            Dictionaries (<c>d...e</c>).
            </summary>
        </member>
    </members>
</doc>
